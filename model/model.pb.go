// Code generated by protoc-gen-go.
// source: model.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	RenderRequest
	ArcPresentation
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArcDataFormat int32

const (
	ArcDataFormat_JSON ArcDataFormat = 0
	ArcDataFormat_ARC  ArcDataFormat = 1
	ArcDataFormat_PUML ArcDataFormat = 2
)

var ArcDataFormat_name = map[int32]string{
	0: "JSON",
	1: "ARC",
	2: "PUML",
}
var ArcDataFormat_value = map[string]int32{
	"JSON": 0,
	"ARC":  1,
	"PUML": 2,
}

func (x ArcDataFormat) String() string {
	return proto.EnumName(ArcDataFormat_name, int32(x))
}
func (ArcDataFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PresentationPerspective int32

const (
	PresentationPerspective_CONTEXT   PresentationPerspective = 0
	PresentationPerspective_CONTAINER PresentationPerspective = 1
	PresentationPerspective_COMPONENT PresentationPerspective = 2
	PresentationPerspective_CODE      PresentationPerspective = 4
	PresentationPerspective_LANDSCAPE PresentationPerspective = 5
)

var PresentationPerspective_name = map[int32]string{
	0: "CONTEXT",
	1: "CONTAINER",
	2: "COMPONENT",
	4: "CODE",
	5: "LANDSCAPE",
}
var PresentationPerspective_value = map[string]int32{
	"CONTEXT":   0,
	"CONTAINER": 1,
	"COMPONENT": 2,
	"CODE":      4,
	"LANDSCAPE": 5,
}

func (x PresentationPerspective) String() string {
	return proto.EnumName(PresentationPerspective_name, int32(x))
}
func (PresentationPerspective) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ArcVisualFormat int32

const (
	ArcVisualFormat_PNG ArcVisualFormat = 0
	ArcVisualFormat_SVG ArcVisualFormat = 1
	ArcVisualFormat_PDF ArcVisualFormat = 2
)

var ArcVisualFormat_name = map[int32]string{
	0: "PNG",
	1: "SVG",
	2: "PDF",
}
var ArcVisualFormat_value = map[string]int32{
	"PNG": 0,
	"SVG": 1,
	"PDF": 2,
}

func (x ArcVisualFormat) String() string {
	return proto.EnumName(ArcVisualFormat_name, int32(x))
}
func (ArcVisualFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RenderRequest struct {
	// Type of the data
	DataFormat ArcDataFormat `protobuf:"varint,1,opt,name=dataFormat,enum=model.ArcDataFormat" json:"dataFormat,omitempty"`
	// visualFormat of the render request
	VisualFormat ArcVisualFormat `protobuf:"varint,2,opt,name=visualFormat,enum=model.ArcVisualFormat" json:"visualFormat,omitempty"`
	// data is the raw serialized byte array of the arc data type
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// perspective specify the level of architecture view to render
	Perspective PresentationPerspective `protobuf:"varint,4,opt,name=perspective,enum=model.PresentationPerspective" json:"perspective,omitempty"`
	// target specify the specific element to render
	Target []string `protobuf:"bytes,5,rep,name=target" json:"target,omitempty"`
}

func (m *RenderRequest) Reset()                    { *m = RenderRequest{} }
func (m *RenderRequest) String() string            { return proto.CompactTextString(m) }
func (*RenderRequest) ProtoMessage()               {}
func (*RenderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RenderRequest) GetDataFormat() ArcDataFormat {
	if m != nil {
		return m.DataFormat
	}
	return ArcDataFormat_JSON
}

func (m *RenderRequest) GetVisualFormat() ArcVisualFormat {
	if m != nil {
		return m.VisualFormat
	}
	return ArcVisualFormat_PNG
}

func (m *RenderRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RenderRequest) GetPerspective() PresentationPerspective {
	if m != nil {
		return m.Perspective
	}
	return PresentationPerspective_CONTEXT
}

func (m *RenderRequest) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

type ArcPresentation struct {
	// Format of the presentation
	Format ArcVisualFormat `protobuf:"varint,1,opt,name=format,enum=model.ArcVisualFormat" json:"format,omitempty"`
	// Serialized raw data to be shared
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ArcPresentation) Reset()                    { *m = ArcPresentation{} }
func (m *ArcPresentation) String() string            { return proto.CompactTextString(m) }
func (*ArcPresentation) ProtoMessage()               {}
func (*ArcPresentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArcPresentation) GetFormat() ArcVisualFormat {
	if m != nil {
		return m.Format
	}
	return ArcVisualFormat_PNG
}

func (m *ArcPresentation) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RenderRequest)(nil), "model.RenderRequest")
	proto.RegisterType((*ArcPresentation)(nil), "model.ArcPresentation")
	proto.RegisterEnum("model.ArcDataFormat", ArcDataFormat_name, ArcDataFormat_value)
	proto.RegisterEnum("model.PresentationPerspective", PresentationPerspective_name, PresentationPerspective_value)
	proto.RegisterEnum("model.ArcVisualFormat", ArcVisualFormat_name, ArcVisualFormat_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ArcViz service

type ArcVizClient interface {
	// Render serve the presentation given the raw data and type
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*ArcPresentation, error)
}

type arcVizClient struct {
	cc *grpc.ClientConn
}

func NewArcVizClient(cc *grpc.ClientConn) ArcVizClient {
	return &arcVizClient{cc}
}

func (c *arcVizClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*ArcPresentation, error) {
	out := new(ArcPresentation)
	err := grpc.Invoke(ctx, "/model.ArcViz/Render", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArcViz service

type ArcVizServer interface {
	// Render serve the presentation given the raw data and type
	Render(context.Context, *RenderRequest) (*ArcPresentation, error)
}

func RegisterArcVizServer(s *grpc.Server, srv ArcVizServer) {
	s.RegisterService(&_ArcViz_serviceDesc, srv)
}

func _ArcViz_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcVizServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.ArcViz/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcVizServer).Render(ctx, req.(*RenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArcViz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.ArcViz",
	HandlerType: (*ArcVizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _ArcViz_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x3d, 0x6f, 0xe2, 0x40,
	0x10, 0xc5, 0xc6, 0x98, 0x63, 0x80, 0xbb, 0xd5, 0xe8, 0xc4, 0x59, 0x57, 0x44, 0x88, 0x0a, 0x21,
	0x44, 0x41, 0x52, 0x44, 0xa9, 0xe2, 0xd8, 0x06, 0x25, 0x02, 0xdb, 0x5a, 0x3e, 0x94, 0x26, 0x85,
	0x03, 0x9b, 0x08, 0x09, 0x30, 0x59, 0x2f, 0x14, 0xf9, 0xd3, 0xf9, 0x0b, 0x91, 0xd7, 0x0e, 0x2c,
	0x05, 0xdd, 0xbe, 0x99, 0xf7, 0x9e, 0xde, 0xcc, 0x0e, 0x54, 0x37, 0xf1, 0x92, 0xad, 0x7b, 0x3b,
	0x1e, 0x8b, 0x18, 0x4b, 0x12, 0xb4, 0xbe, 0x34, 0xa8, 0x53, 0xb6, 0x5d, 0x32, 0x4e, 0xd9, 0xc7,
	0x9e, 0x25, 0x02, 0x6f, 0x00, 0x96, 0x91, 0x88, 0x06, 0x31, 0xdf, 0x44, 0xc2, 0xd2, 0x9a, 0x5a,
	0xfb, 0x77, 0xff, 0x6f, 0x2f, 0x93, 0xda, 0x7c, 0xe1, 0x1e, 0x7b, 0x54, 0xe1, 0xe1, 0x1d, 0xd4,
	0x0e, 0xab, 0x64, 0x1f, 0xad, 0x73, 0x9d, 0x2e, 0x75, 0x8d, 0x93, 0x6e, 0xae, 0x74, 0xe9, 0x19,
	0x17, 0x11, 0x8c, 0xd4, 0xc9, 0x2a, 0x36, 0xb5, 0x76, 0x8d, 0xca, 0x37, 0xde, 0x43, 0x75, 0xc7,
	0x78, 0xb2, 0x63, 0x0b, 0xb1, 0x3a, 0x30, 0xcb, 0x90, 0x76, 0x57, 0xb9, 0x5d, 0xc8, 0x59, 0xc2,
	0xb6, 0x22, 0x12, 0xab, 0x78, 0x1b, 0x9e, 0x58, 0x54, 0x95, 0x60, 0x03, 0x4c, 0x11, 0xf1, 0x77,
	0x26, 0xac, 0x52, 0xb3, 0xd8, 0xae, 0xd0, 0x1c, 0xb5, 0x66, 0xf0, 0xc7, 0xe6, 0x0b, 0xd5, 0x02,
	0x7b, 0x60, 0xbe, 0xa9, 0xe3, 0x5e, 0x8a, 0x9d, 0xb3, 0x8e, 0x81, 0xf5, 0x53, 0xe0, 0x4e, 0x17,
	0xea, 0x67, 0xdb, 0xc1, 0x5f, 0x60, 0x3c, 0x4d, 0x02, 0x9f, 0x14, 0xb0, 0x0c, 0x45, 0x9b, 0x3a,
	0x44, 0x4b, 0x4b, 0xe1, 0x6c, 0x3c, 0x22, 0x7a, 0xe7, 0x05, 0xfe, 0x5d, 0x18, 0x02, 0xab, 0x50,
	0x76, 0x02, 0x7f, 0xea, 0x3d, 0x4f, 0x49, 0x01, 0xeb, 0x50, 0x49, 0x81, 0xfd, 0xe8, 0x7b, 0x94,
	0x68, 0x19, 0x1c, 0x87, 0x81, 0xef, 0xf9, 0x53, 0xa2, 0xa7, 0x7e, 0x4e, 0xe0, 0x7a, 0xc4, 0x48,
	0x1b, 0x23, 0xdb, 0x77, 0x27, 0x8e, 0x1d, 0x7a, 0xa4, 0xd4, 0xe9, 0xca, 0x19, 0xd5, 0xec, 0x69,
	0x88, 0xd0, 0x1f, 0x66, 0x69, 0x26, 0xf3, 0x21, 0xd1, 0x64, 0xc5, 0x1d, 0x10, 0xbd, 0xff, 0x00,
	0xa6, 0x64, 0x7f, 0xe2, 0x2d, 0x98, 0xd9, 0x31, 0xe0, 0xcf, 0x8f, 0x9f, 0xdd, 0xc6, 0x7f, 0x65,
	0x31, 0x6a, 0xfc, 0x56, 0xe1, 0xd5, 0x94, 0x57, 0x75, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x68,
	0x89, 0x95, 0x0b, 0x64, 0x02, 0x00, 0x00,
}
